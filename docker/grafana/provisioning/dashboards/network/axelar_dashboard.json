{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 7,
  "links": [],
  "panels": [
    {
      "description": "",
      "fieldConfig": {
        "defaults": {},
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 6,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "<!-- Main content -->\n<div style=\"display: flex; justify-content: space-between; align-items: center;\">\n  <!-- H2 with a link -->\n   <a href=\"https://github.com/cosmostation/cvms\" target=\"_blank\" style=\"text-decoration: none; color: inherit;\">\n    <h2 style=\"margin-right: 10px;\">Cosmos Validator Monitoring Service (CVMS) ðŸŒŒ ðŸ”­</h2>\n  </a> \n  <!-- \"Powered by Cosmostation\" on the right -->\n  <div style=\"display: flex; align-items: center;\">\n    <a href=\"https://cosmostation.io\" target=\"_blank\" style=\"text-decoration: none; color: inherit;\">\n        <span>Powered by Cosmostation </span>\n        <img src=\"https://raw.githubusercontent.com/cosmostation/chainlist/refs/heads/main/resource/cosmostation/cosmostation_color.svg\" alt=\"Logo\" style=\"height: 30px; margin-left: 5px;\">\n    </a>\n  </div>\n</div>\n\n<!-- Paragraph below the header -->\n<p>\n  The Cosmos Validator Monitoring Service (CVMS) is an open-source, integrated monitoring system designed for validators and network in the Cosmos app chain ecosystem.<br/>\n  This public dashboard is a playground for developers and beta release testing for CVMS.\n</p>\n<p>\n  <a href=\"https://github.com/cosmostation/cvms\" target=\"_blank\" style=\"text-decoration: none; color: #1E90FF;\">\n    ðŸ‘‰ CVMS Github Link Here!\n  </a> \n  <a href=\"https://github.com/cosmostation/cvms/blob/release/docs/setup.md\" target=\"_blank\" style=\"text-decoration: none; color: #1E90FF;\">\n    ðŸ‘‰ CVMS Setup Guide Here!!\n  </a> \n</p>",
        "mode": "html"
      },
      "pluginVersion": "11.3.0",
      "title": "",
      "type": "text"
    },
    {
      "datasource": {
        "uid": "cvms_exporter_db"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "orange",
            "mode": "fixed"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 24,
        "x": 0,
        "y": 4
      },
      "id": 24,
      "options": {
        "displayMode": "lcd",
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "maxVizHeight": 300,
        "minVizHeight": 16,
        "minVizWidth": 8,
        "namePlacement": "left",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": ["lastNotNull"],
          "fields": "",
          "values": false
        },
        "showUnfilled": true,
        "sizing": "auto",
        "valueMode": "color"
      },
      "pluginVersion": "11.3.0",
      "targets": [
        {
          "editorMode": "code",
          "expr": "time() - cvms_root_index_pointer_timestamp{chain_id='$chain_id'}",
          "legendFormat": "{{package}}",
          "range": true,
          "refId": "A"
        }
      ],
      "title": "Indexer Sync Delay",
      "type": "bargauge"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 8
      },
      "id": 20,
      "panels": [],
      "title": "Block Data Analytics",
      "type": "row"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "cvms_exporter_db"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 4,
        "x": 0,
        "y": 9
      },
      "id": 22,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": ["lastNotNull"],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "11.3.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "cvms_exporter_db"
          },
          "editorMode": "code",
          "expr": "(cvms_block_data_analytics_block_gas_used{chain_id='$chain_id'} / scalar(cvms_block_data_analytics_block_max_gas{chain_id='$chain_id'})) * 100",
          "instant": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "A"
        }
      ],
      "title": "Block Gas Usage %",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "cvms_exporter_db"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 4,
        "x": 4,
        "y": 9
      },
      "id": 21,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": ["lastNotNull"],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "11.3.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "cvms_exporter_db"
          },
          "editorMode": "code",
          "expr": "(cvms_block_data_analytics_block_txs_bytes{chain_id='$chain_id'} / scalar(cvms_block_data_analytics_block_max_bytes{chain_id='$chain_id'})) * 100 ",
          "instant": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "A"
        }
      ],
      "title": "Tx Bytes Usage %",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "cvms_indexer_db"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "cellOptions": {
              "type": "auto"
            },
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 16,
        "x": 8,
        "y": 9
      },
      "id": 19,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": ["sum"],
          "show": false
        },
        "showHeader": true
      },
      "pluginVersion": "11.3.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "cvms_indexer_db"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "select \n\tbda.height, \n\tbda.total_gas_used,\n\tbda.total_gas_wanted,\n\tbda.total_txs_bytes,\n\tbda.success_txs_count,\n\tbda.failed_txs_count\nfrom block_data_analytics_${table_chain_id} bda \nORDER BY height desc\nlimit 10;",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Latest Blocks Info",
      "type": "table"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 16
      },
      "id": 27,
      "panels": [],
      "title": "Amplifier Verifier Dashboard",
      "type": "row"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "cvms_indexer_db"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "cellOptions": {
              "type": "auto"
            },
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "chain_and_poll_id"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Failed Chain and Poll ID"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "moniker"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 467
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "DidNotVote"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 147
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "DidNotVotePolls"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 267
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "FailedOnChainPolls"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 156
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "NotFoundPolls"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 135
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 9,
        "w": 24,
        "x": 0,
        "y": 17
      },
      "id": 25,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": ["sum"],
          "show": false
        },
        "showHeader": true,
        "sortBy": [
          {
            "desc": true,
            "displayName": "DidNotVote"
          }
        ]
      },
      "pluginVersion": "11.3.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "cvms_indexer_db"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "  \nSELECT vi.moniker,\n\tCOUNT(CASE WHEN status = 0 THEN 1 END) as \"DidNotVote\",\n\tSTRING_AGG(CASE WHEN status = 0 THEN chain_and_poll_id END, ', ') AS \"DidNotVotePolls\",\n\tCOUNT(CASE WHEN status = 1 THEN 1 END) as \"FailedOnChain\",\n\tSTRING_AGG(CASE WHEN status = 1 THEN chain_and_poll_id END, ', ') AS \"FailedOnChainPolls\",\n\tCOUNT(CASE WHEN status = 2 THEN 1 END) as \"NotFound\",\n\tSTRING_AGG(CASE WHEN status = 2 THEN chain_and_poll_id END, ', ') AS \"NotFoundPolls\",\n\tCOUNT(CASE WHEN status = 3 THEN 1 END) as \"SucceededOnChain\",\n\tSTRING_AGG(CASE WHEN status = 3 THEN chain_and_poll_id END, ', ') AS \"SucceededOnChainPolls\"\nFROM axelar_amplifier_verifier_${table_chain_id} idx\nJOIN meta.verifier_info vi ON idx.verifier_id  = vi.id\nWHERE\n  idx.poll_start_height > (\n    SELECT MAX(poll_start_height) - ${blocks}\n    FROM axelar_amplifier_verifier_${table_chain_id}\n  )\n  and idx.created_at < NOW() + INTERVAL '${interval_mins} minutes'\n\nGROUP BY vi.moniker;\n",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Amplifier Verifier Indexed Vote Status",
      "type": "table"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-postgresql-datasource",
        "uid": "cvms_indexer_db"
      },
      "fieldConfig": {
        "defaults": {},
        "overrides": []
      },
      "gridPos": {
        "h": 23,
        "w": 24,
        "x": 0,
        "y": 26
      },
      "id": 26,
      "options": {
        "allData": {},
        "config": {},
        "data": [],
        "imgFormat": "png",
        "layout": {
          "font": {
            "family": "Inter, Helvetica, Arial, sans-serif"
          },
          "margin": {
            "b": 0,
            "l": 0,
            "r": 0,
            "t": 0
          },
          "title": {
            "automargin": true
          },
          "xaxis": {
            "automargin": true,
            "autorange": true,
            "type": "date"
          },
          "yaxis": {
            "automargin": true,
            "autorange": true
          }
        },
        "onclick": "// Event handling\n/*\n// 'data', 'variables', 'options', 'utils', and 'event' are passed as arguments\n\ntry {\n  const { type: eventType, data: eventData } = event;\n  const { timeZone, dayjs, locationService, getTemplateSrv } = utils;\n\n  switch (eventType) {\n    case 'click':\n      console.log('Click event:', eventData.points);\n      break;\n    case 'select':\n      console.log('Selection event:', eventData.range);\n      break;\n    case 'zoom':\n      console.log('Zoom event:', eventData);\n      break;\n    default:\n      console.log('Unhandled event type:', eventType, eventData);\n  }\n\n  console.log('Current time zone:', timeZone);\n  console.log('From time:', dayjs(variables.__from).format());\n  console.log('To time:', dayjs(variables.__to).format());\n\n  // Example of using locationService\n  // locationService.partial({ 'var-example': 'test' }, true);\n\n} catch (error) {\n  console.error('Error in onclick handler:', error);\n}\n*/\n  ",
        "resScale": 2,
        "script": "let series = data.series[0];  \nlet height = series.fields[0];  \nlet moniker = series.fields[1];\nlet voted = series.fields[2];   \nlet poll_id = series.fields[3];\nlet vote_height = series.fields[4];\n\n// Get unique monikers and heights from the dataset for rows and columns\nlet uniqueHeights = [...new Set(height.values)].sort().reverse();    \nlet uniqueMonikers = [...new Set(moniker.values)].sort().reverse();  \n\n// Initialize the 2D array (zValues) for the heatmap, default to 0 (Inactive)\nlet zValues = Array(uniqueMonikers.length).fill(null).map(() => Array(uniqueHeights.length).fill(0));\nlet hoverText = Array(uniqueMonikers.length).fill(null).map(() => Array(uniqueHeights.length).fill(\"\"));\n\nfor (let i = 0; i < height.values.length; i++) {\n  let rowIndex = uniqueMonikers.indexOf(moniker.values[i]);  \n  let colIndex = uniqueHeights.indexOf(height.values[i]);    \n  zValues[rowIndex][colIndex] = voted.values[i];  \n\n  // Add meta data\n  let statusMeaning = getStatusMeaning(voted.values[i]);  \n  let id = poll_id.values[i];\n  let vh = vote_height.values[i];\n  hoverText[rowIndex][colIndex] = `poll-id: ${id}<br>status: ${statusMeaning}<br>vote height: ${vh}`; \n}\n\n// Define a continuous color scale for smoother transitions\nlet colorScale = [\n  [0, 'rgba(217, 78, 78, 0.5)'], \n  [0.33, 'rgba(217, 78, 78, 0.5)'],\n  [0.66, 'rgba(234, 205, 78, 0.5)'],\n  [1, 'rgba(58, 174, 84, 0.5)']\n];\n\n\n// Return the heatmap configuration for Plotly\nreturn {\n  data: [{\n    z: zValues,               // 2D array of statuses (0, 1, 2, 3)\n    x: uniqueHeights,         // Block heights for X-axis\n    y: uniqueMonikers,        // Monikers for Y-axis\n    type: 'heatmap',          // Plotly heatmap type\n    colorscale: colorScale,   // Use only two colors for discrete values\n    showscale: false,         // Hide the color scale bar\n    zmin: 0,                  // Set the minimum value for z (status)\n    zmax: 3,                  // Set the maximum value for z (status)\n    xgap: 5,                  // Add gap between cells along the X-axis (adjust the value for bigger gaps)\n    ygap: 5,                   // Add gap between cells along the Y-axis (adjust the value for bigger gaps)    \n    text: hoverText,          // Set the hoverText for the heatmap\n    hoverinfo: 'text'         // Display the hoverText    \n  }],\n  layout: {\n    xaxis: {\n      type: 'category',\n      tickmode: 'linear',\n      showgrid: true,          // Ensure gridlines on X-axis\n      tickformat: '.0f',\n      tickangle: -45,          // Rotate labels for better readability\n    },\n    yaxis: {\n      tickmode: 'array',        // Use tickmode 'array' to manually set Y-axis labels\n      tickvals: uniqueMonikers, // Set tick values to all unique monikers\n      ticktext: uniqueMonikers, // Display all monikers as text on Y-axis\n      showgrid: true            // Ensure gridlines on Y-axis\n    },\n    margin: {\n      l: 200,  // Adjust margin for longer moniker names\n      t: 20,   // Reduce top margin\n      b: 120,  // Adjust bottom margin for X-axis labels\n    }\n  }\n};\n\n\nfunction getStatusMeaning(status) {\n  switch(status) {\n    case 0:\n      return 'DidNotVote';\n    case 1:\n      return 'FailedOnChain';\n    case 2:\n      return 'NotFound';\n    case 3:\n      return 'SucceededOnChain';\n  }\n}",
        "syncTimeRange": false,
        "timeCol": ""
      },
      "pluginVersion": "1.8.1",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "cvms_indexer_db"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT\n  t1.poll_start_height,\n  t2.verifier_address,\n  t1.status,\n  t1.chain_and_poll_id,\n  t1.poll_vote_height\nFROM\n  axelar_amplifier_verifier_${table_chain_id} t1\nJOIN\n  meta.verifier_info t2\n  ON t1.verifier_id = t2.id\nWHERE\n  t1.poll_start_height > (\n    SELECT MAX(poll_start_height) - ${blocks}\n    FROM axelar_amplifier_verifier_${table_chain_id}\n  )\n  And t1.created_at < NOW() - INTERVAL '${interval_mins} minutes'\n\n",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Amplifier Verifier Vote Status",
      "transparent": true,
      "type": "nline-plotlyjs-panel"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 49
      },
      "id": 5,
      "panels": [],
      "title": "CometBFT Validator Dashboard",
      "type": "row"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-postgresql-datasource",
        "uid": "cvms_indexer_db"
      },
      "fieldConfig": {
        "defaults": {},
        "overrides": []
      },
      "gridPos": {
        "h": 38,
        "w": 24,
        "x": 0,
        "y": 50
      },
      "id": 8,
      "options": {
        "allData": {},
        "config": {},
        "data": [],
        "imgFormat": "png",
        "layout": {
          "font": {
            "family": "Inter, Helvetica, Arial, sans-serif"
          },
          "margin": {
            "b": 0,
            "l": 0,
            "r": 0,
            "t": 0
          },
          "title": {
            "automargin": true
          },
          "xaxis": {
            "automargin": true,
            "autorange": true,
            "type": "date"
          },
          "yaxis": {
            "automargin": true,
            "autorange": true
          }
        },
        "onclick": "// Event handling\n/*\n// 'data', 'variables', 'options', 'utils', and 'event' are passed as arguments\n\ntry {\n  const { type: eventType, data: eventData } = event;\n  const { timeZone, dayjs, locationService, getTemplateSrv } = utils;\n\n  switch (eventType) {\n    case 'click':\n      console.log('Click event:', eventData.points);\n      break;\n    case 'select':\n      console.log('Selection event:', eventData.range);\n      break;\n    case 'zoom':\n      console.log('Zoom event:', eventData);\n      break;\n    default:\n      console.log('Unhandled event type:', eventType, eventData);\n  }\n\n  console.log('Current time zone:', timeZone);\n  console.log('From time:', dayjs(variables.__from).format());\n  console.log('To time:', dayjs(variables.__to).format());\n\n  // Example of using locationService\n  // locationService.partial({ 'var-example': 'test' }, true);\n\n} catch (error) {\n  console.error('Error in onclick handler:', error);\n}\n*/\n  ",
        "resScale": 2,
        "script": "// Extracting the SQL data\nlet series = data.series[0];  // Access the data series\nif (!series || series.length === 0 || series.fields[0].values.length === 0) {\n  // Query result has no records, so skip the chart rendering\n  return {\n      data: [],\n    layout: {\n      title: 'No Data Available',\n      height: 10, // Reduce panel height\n      margin: {\n        l: 20,  // Left margin\n        r: 20,  // Right margin\n        t: 40,  // Top margin\n        b: 40   // Bottom margin\n      }\n    }\n  };\n}\n\n// Start data processing\nlet height = series.fields[0];  // Block height\nlet voted = series.fields[1];   // Voted status (0 = Inactive, 1 = Missed, 2 = Voted, 3 = Proposed)\nlet moniker = series.fields[2]; // Moniker (Validator name)\n\n\nif (moniker.values[0].length > 90) {\n  // Shorten the moniker values before sorting and using them\n  let shortenedMonikers = moniker.values.map(m => shortenMoniker(m));\n  moniker.values = shortenedMonikers;\n}\n\n// Get unique monikers and heights from the dataset for rows and columns\nlet uniqueMonikers = [...new Set(moniker.values)].sort().reverse();  // Unique monikers for Y-axis\nlet uniqueHeights = [...new Set(height.values)].sort().reverse();    // Unique block heights for X-axis\n\n// Initialize the 2D array (zValues) for the heatmap, default to 0 (Inactive)\nlet zValues = Array(uniqueMonikers.length).fill(null).map(() => Array(uniqueHeights.length).fill(0));\nlet hoverText = Array(uniqueMonikers.length).fill(null).map(() => Array(uniqueHeights.length).fill(\"\"));\n\n// Populate zValues with voted data (0 = Inactive, 1 = Missed, 2 = Voted, 3 = Proposed)\nfor (let i = 0; i < height.values.length; i++) {\n  let rowIndex = uniqueMonikers.indexOf(moniker.values[i]);  // Find the correct row for the moniker\n  let colIndex = uniqueHeights.indexOf(height.values[i]);    // Find the correct column for the height\n  zValues[rowIndex][colIndex] = voted.values[i];  // Assign the voted status\n  let statusMeaning = getStatusMeaning(voted.values[i]);  // Get the status meaning\n  hoverText[rowIndex][colIndex] = `x: ${height.values[i]}<br>y: ${moniker.values[i]}<br>z: ${statusMeaning}`;  // Custom hover info with status meaning    \n}\n\n// Define a continuous color scale for smoother transitions\nlet colorScale = [\n  [0, 'rgba(128, 128, 128, 0.5)'],    // Inactive = gray\n  [0.33, 'rgba(255, 0, 0, 0.5)'],     // Missed = red\n  [0.66, 'rgba(0, 0, 0, 0.5)'],       // Voted = black\n  [1, 'rgba(0, 255, 0, 0.5)'],        // Proposed = green\n];\n\n\n// Return the heatmap configuration for Plotly\nreturn {\n  data: [{\n    z: zValues,               // 2D array of statuses (0, 1, 2, 3)\n    x: uniqueHeights,         // Block heights for X-axis\n    y: uniqueMonikers,        // Monikers for Y-axis\n    type: 'heatmap',          // Plotly heatmap type\n    colorscale: colorScale,   // Use only two colors for discrete values\n    showscale: false,         // Hide the color scale bar\n    zmin: 0,                  // Set the minimum value for z (status)\n    zmax: 3,                  // Set the maximum value for z (status)\n    xgap: 5,                  // Add gap between cells along the X-axis (adjust the value for bigger gaps)\n    ygap: 5,                   // Add gap between cells along the Y-axis (adjust the value for bigger gaps)    \n    text: hoverText,          // Set the hoverText for the heatmap\n    hoverinfo: 'text'         // Display the hoverText    \n  }],\n  layout: {\n    xaxis: {\n      type: 'category',\n      tickmode: 'linear',\n      showgrid: true,          // Ensure gridlines on X-axis\n      tickformat: '.0f',\n      tickangle: -45,          // Rotate labels for better readability\n    },\n    yaxis: {\n      tickmode: 'array',        // Use tickmode 'array' to manually set Y-axis labels\n      tickvals: uniqueMonikers, // Set tick values to all unique monikers\n      ticktext: uniqueMonikers, // Display all monikers as text on Y-axis\n      showgrid: true            // Ensure gridlines on Y-axis\n    },\n    margin: {\n      l: 200,  // Adjust margin for longer moniker names\n      t: 20,   // Reduce top margin\n      b: 120,  // Adjust bottom margin for X-axis labels\n    }\n  }\n};\n\n// Function to map the voted status to its corresponding meaning\nfunction getStatusMeaning(status) {\n  switch(status) {\n    case 0:\n      return 'Inactive';\n    case 1:\n      return 'Missed';\n    case 2:\n      return 'Voted';\n    case 3:\n      return 'Proposed';\n    default:\n      return 'Unknown';\n  }\n}\n\n// Function to shorten long moniker values\nfunction shortenMoniker(moniker, startLength = 6, endLength = 4) {\n  if (moniker.length > (startLength + endLength)) {\n    return `${moniker.substring(0, startLength)}...${moniker.substring(moniker.length - endLength)}`;\n  }\n  return moniker;  // If it's already short, return as-is\n}",
        "syncTimeRange": false,
        "timeCol": ""
      },
      "pluginVersion": "1.8.1",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "cvms_indexer_db"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": ";\nWITH max_height AS (\n  SELECT MAX(height) AS highest_height\n  FROM voteindexer_${table_chain_id}\n)\nSELECT\n  vidx.height,\n  vidx.status,\n  vi.moniker AS moniker\nFROM\n  voteindexer_${table_chain_id} vidx\nJOIN\n  meta.validator_info vi\n  ON vidx.validator_hex_address_id = vi.id\nJOIN\n  max_height mh  -- Join to get the maximum block height\n  ON vidx.height BETWEEN (mh.highest_height - ${blocks}) AND mh.highest_height\nORDER by\n  vidx.height ASC\n  \n  ",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Consensus Vote Status",
      "type": "nline-plotlyjs-panel"
    }
  ],
  "preload": false,
  "refresh": "5s",
  "schemaVersion": 40,
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "text": "axelar-dojo-1",
          "value": "axelar-dojo-1"
        },
        "datasource": {
          "type": "prometheus",
          "uid": "cvms_exporter_db"
        },
        "definition": "label_values(cvms_block_timestamp{chain=\"axelar\"},chain_id)",
        "includeAll": false,
        "label": "Chain ID",
        "name": "chain_id",
        "options": [],
        "query": {
          "qryType": 1,
          "query": "label_values(cvms_block_timestamp{chain=\"axelar\"},chain_id)",
          "refId": "PrometheusVariableQueryEditor-VariableQuery"
        },
        "refresh": 1,
        "regex": "",
        "type": "query"
      },
      {
        "current": {
          "text": "",
          "value": ""
        },
        "datasource": {
          "type": "prometheus",
          "uid": "cvms_exporter_db"
        },
        "definition": "label_values(cvms_block_timestamp{table_chain_id=\"$chain_id\"},chain)",
        "hide": 2,
        "includeAll": false,
        "label": "Chain",
        "name": "chain",
        "options": [],
        "query": {
          "qryType": 1,
          "query": "label_values(cvms_block_timestamp{table_chain_id=\"$chain_id\"},chain)",
          "refId": "PrometheusVariableQueryEditor-VariableQuery"
        },
        "refresh": 1,
        "regex": "",
        "type": "query"
      },
      {
        "current": {
          "text": "axelar_dojo_1",
          "value": "axelar_dojo_1"
        },
        "datasource": {
          "type": "prometheus",
          "uid": "cvms_exporter_db"
        },
        "definition": "label_values(cvms_block_height{chain_id=\"$chain_id\"},table_chain_id)",
        "description": "",
        "hide": 2,
        "name": "table_chain_id",
        "options": [],
        "query": {
          "qryType": 1,
          "query": "label_values(cvms_block_height{chain_id=\"$chain_id\"},table_chain_id)",
          "refId": "PrometheusVariableQueryEditor-VariableQuery"
        },
        "refresh": 1,
        "regex": "",
        "type": "query"
      },
      {
        "current": {
          "text": "30",
          "value": "30"
        },
        "description": "the block number to monitor",
        "label": "monitor_blocks",
        "name": "blocks",
        "options": [
          {
            "selected": true,
            "text": "30",
            "value": "30"
          }
        ],
        "query": "30",
        "type": "textbox"
      },
      {
        "current": {
          "text": "5",
          "value": "5"
        },
        "description": "Waiting time for finalizing amplifier voting status",
        "label": "interval minutes",
        "name": "interval_mins",
        "options": [
          {
            "selected": true,
            "text": "5",
            "value": "5"
          }
        ],
        "query": "1",
        "type": "textbox"
      }
    ]
  },
  "time": {
    "from": "now-30m",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "browser",
  "title": "Axelar Dashboard",
  "uid": "axelar_dashboard",
  "version": 1,
  "weekStart": ""
}
